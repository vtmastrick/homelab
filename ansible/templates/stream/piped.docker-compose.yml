version: "3"

services:
    pipedfrontend:
        image: 1337kavin/piped-frontend:latest
        restart: unless-stopped
        depends_on:
            - piped
        container_name: piped-frontend
        entrypoint: ash -c 'sed -i s/pipedapi.kavin.rocks/pipedapi.stream.local.mastrick.com/g /usr/share/nginx/html/assets/* && /docker-entrypoint.sh && nginx -g "daemon off;"'
        networks:
          - piped
    piped-proxy:
        image: 1337kavin/piped-proxy:latest
        restart: unless-stopped
        environment:
            - UDS=1
        volumes:
            - piped-proxy:/app/socket
        container_name: piped-proxy
        networks:
          - piped
    piped:
        image: 1337kavin/piped:latest
        restart: unless-stopped
        volumes:
            - ./config/config.properties:/app/config.properties:ro
        depends_on:
            - postgres
        container_name: piped-backend
        networks:
          - piped
    nginx:
        image: nginx:mainline-alpine
        restart: unless-stopped
        ports:
            - "8008:80"
        volumes:
            - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./config/pipedapi.conf:/etc/nginx/conf.d/pipedapi.conf:ro
            - ./config/pipedproxy.conf:/etc/nginx/conf.d/pipedproxy.conf:ro
            - ./config/pipedfrontend.conf:/etc/nginx/conf.d/pipedfrontend.conf:ro
            - ./config/ytproxy.conf:/etc/nginx/snippets/ytproxy.conf:ro
            - piped-proxy:/var/run/ytproxy
        container_name: nginx-piped
        depends_on:
            - piped
            - piped-proxy
            - pipedfrontend
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.piped.rule=Host(`piped.stream.local.mastrick.com`, `pipedapi.stream.local.mastrick.com`, `pipedproxy.stream.local.mastrick.com`)"
            - "traefik.http.routers.piped.entrypoints=websecure"
            - "traefik.http.services.piped.loadbalancer.server.port=8080"
        networks:
          - piped
          - nginx-bridge

    postgres:
        image: postgres:15
        restart: unless-stopped
        volumes:
            - ./data/db:/var/lib/postgresql/data
        environment:
            - POSTGRES_DB=piped
            - POSTGRES_USER=piped
            - POSTGRES_PASSWORD={{ vault_piped_hibernate_key }}
        container_name: piped-postgres
        networks:
          - piped
    watchtower:
        image: containrrr/watchtower
        restart: always
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /etc/timezone:/etc/timezone:ro
        environment:
            - WATCHTOWER_CLEANUP=true
            - WATCHTOWER_INCLUDE_RESTARTING=true
        container_name: watchtower-piped
        command: piped-frontend piped-backend piped-proxy varnish nginx-piped piped-postgres watchtower-piped
        networks:
          - piped

volumes:
    piped-proxy: null

networks:
  piped:
  nginx-bridge:
    external: true
